{"version":3,"sources":["Counter.js","FunctionCounterHooks.js","App.js","index.js"],"names":["Counter","props","state","count","initialCount","ThemeContext","Consumer","style","onClick","changeCount","resetzero","amount","this","setState","prevState","Component","FunctionCountHooks","useState","setCount","useContext","prevCount","resetCount","React","createContext","App","theme","setTheme","Provider","value","backgroundColor","prevTheme","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAoDeA,E,kDAhDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAIDC,MAAQ,CACTC,MAAOF,EAAMG,cANF,E,qDAUT,IAAD,OACL,OACI,kBAACC,EAAaC,SAAd,MACK,SAAAC,GAAK,OACF,6BACI,4BAAQA,MAAOA,EAAOC,QAAS,kBAAM,EAAKC,aAAa,KAAvD,KACA,8BAAO,EAAKP,MAAMC,OAClB,4BAAQI,MAAOA,EAAOC,QAAS,kBAAM,EAAKC,YAAY,KAAtD,KACA,6BACA,4BAAQF,MAAOA,EAAOC,QAAS,kBAAM,EAAKE,UAAU,KAApD,wB,kCAgBRC,GACRC,KAAKC,UAAS,SAAAC,GAAe,MAAO,CAAEX,MAAOW,EAAUX,MAAQQ,Q,kCAO/DC,KAAKC,UAAS,WAAQ,MAAO,CAAEV,MAAO,U,GA5CxBY,aCAP,SAASC,EAAT,GAA+C,IAAjBZ,EAAgB,EAAhBA,aAAgB,EAC/Ba,mBAASb,GADsB,mBAClDD,EADkD,KAC3Ce,EAD2C,KAEnDX,EAAQY,qBAAWd,GAEzB,OACI,6BACI,4BAAQE,MAAOA,EAAOC,QAAS,kBAAMU,GAAS,SAAAE,GAAS,OAAIA,EAAY,OAAvE,OACA,8BAAOjB,GACP,4BAAQI,MAAOA,EAAOC,QAAS,kBAAMU,GAAS,SAAAE,GAAS,OAAIA,EAAY,OAAvE,OACA,6BACA,4BAAQb,MAAOA,EAAOC,QAAS,kBAAMU,GAAS,SAAAG,GAAU,OAAiB,EAAbA,OAA5D,oBCPL,IAAMhB,EAAeiB,IAAMC,gBAqBnBC,MAnBf,WAAgB,IAAD,EACaP,mBAAS,aADtB,mBACNQ,EADM,KACCC,EADD,KAEb,OAEE,kBAAErB,EAAasB,SAAf,CAAwBC,MAAO,CAAEC,gBAAiBJ,IAChD,mDACA,kBAAC,EAAD,CAASrB,aAAc,IAFzB,KAIE,uEACA,kBAAC,EAAD,CAAsBA,aAAc,IAEpC,4BAAQI,QAAS,kBAAMkB,GAAS,SAAAI,GAC9B,MAAqB,cAAdA,EAA4B,OAAS,iBAD9C,yBCdNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.214e7834.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { ThemeContext } from './App';\r\n// It is harder to deal with context in class component\r\nclass Counter extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        //Using state by overriding the constructors\r\n        //Everytime you change the state it re-renders the application\r\n        this.state = {\r\n            count: props.initialCount\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ThemeContext.Consumer>\r\n                {style => (\r\n                    <div>\r\n                        <button style={style} onClick={() => this.changeCount(-1)}>-</button>\r\n                        <span>{this.state.count}</span>\r\n                        <button style={style} onClick={() => this.changeCount(+1)}>+</button>\r\n                        <br />\r\n                        <button style={style} onClick={() => this.resetzero(0)}> Reset Counter</button>\r\n                    </div>\r\n                )}\r\n            </ThemeContext.Consumer>\r\n\r\n        )\r\n    }\r\n\r\n    // Use this state while only setting the count to zero like\r\n    // this.setState({ count: 0 })\r\n    //There is a bug here\r\n    //changeCount(amount) {\r\n    //    this.setState({ count: this.state.count + amount })  // There is a bug here ... setState is an ASYNC function\r\n    //   this.setState({ count: this.state.count + amount }) // If two setState is added it adds two and subs two while counting\r\n    //}\r\n\r\n    changeCount(amount) {\r\n        this.setState(prevState => { return { count: prevState.count + amount } })\r\n\r\n        // If setState is added again it increment and decrement the value by another 1\r\n        // this.setState(prevState => { return { count: prevState.count + amount } })\r\n    }\r\n\r\n    resetzero() {\r\n        this.setState(() => { return { count: 0 } })\r\n    }\r\n\r\n}\r\n\r\nexport default Counter;","import React, { useState, useContext } from 'react';\r\nimport { ThemeContext } from './App';\r\n\r\nexport default function FunctionCountHooks({ initialCount }) {\r\n    const [count, setCount] = useState(initialCount)\r\n    const style = useContext(ThemeContext)\r\n\r\n    return (\r\n        <div>\r\n            <button style={style} onClick={() => setCount(prevCount => prevCount - 1)}> - </button>\r\n            <span>{count}</span>\r\n            <button style={style} onClick={() => setCount(prevCount => prevCount + 1)} > + </button>\r\n            <br />\r\n            <button style={style} onClick={() => setCount(resetCount => resetCount * 0)} > Reset Counter </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Counter from './Counter';\nimport FunctionCounterHooks from './FunctionCounterHooks';\n\n\nexport const ThemeContext = React.createContext();\n\nfunction App() {\n  const [theme, setTheme] = useState('limegreen')\n  return (\n\n    < ThemeContext.Provider value={{ backgroundColor: theme }}>\n      <h2>Class Based Counter</h2>\n      <Counter initialCount={0} />  {/* //initial count to number zero instead of string zero */}\n\n      <h2>Function based Counter --Counter Hooks </h2>\n      <FunctionCounterHooks initialCount={0} />\n\n      <button onClick={() => setTheme(prevTheme => {\n        return prevTheme === 'limegreen' ? 'blue' : 'limegreen'\n      })} >Change Button color</button>\n\n    </ThemeContext.Provider >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}